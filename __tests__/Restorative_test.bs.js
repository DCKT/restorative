// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Restorative = require("../src/Restorative.bs.js");

function reducer(state, action) {
  if (action) {
    return /* record */[
            /* count */state[/* count */0] - 1 | 0,
            /* static */state[/* static */1]
          ];
  } else {
    return /* record */[
            /* count */state[/* count */0] + 1 | 0,
            /* static */state[/* static */1]
          ];
  }
}

Jest.describe("Restorative", (function (param) {
        Jest.test("getState returns initial state", (function (param) {
                var initialState = /* record */[
                  /* count */0,
                  /* static */"foo"
                ];
                var match = Restorative.createStore(initialState, reducer);
                return Jest.Expect[/* toBe */2](initialState, Jest.Expect[/* expect */0](Curry._1(match[/* getState */0], /* () */0)));
              }));
        Jest.test("updates state", (function (param) {
                var match = Restorative.createStore(/* record */[
                      /* count */0,
                      /* static */"foo"
                    ], reducer);
                Curry._1(match[/* dispatch */3], /* Increment */0);
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](Curry._1(match[/* getState */0], /* () */0)[/* count */0]));
              }));
        return Jest.test("calls subscriptions", (function (param) {
                      var mock1 = jest.fn((function (prim) {
                              return /* () */0;
                            }));
                      var mock2 = jest.fn((function (prim) {
                              return /* () */0;
                            }));
                      var match = Restorative.createStore(/* record */[
                            /* count */0,
                            /* static */"foo"
                          ], reducer);
                      var subscribe = match[/* subscribe */1];
                      Curry._3(subscribe, mock1, undefined, /* () */0);
                      Curry._3(subscribe, mock2, undefined, /* () */0);
                      Curry._1(match[/* dispatch */3], /* Increment */0);
                      var state = Curry._1(match[/* getState */0], /* () */0);
                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                  /* array */[state],
                                  /* array */[state]
                                ], Jest.Expect[/* expect */0](/* tuple */[
                                      Jest.MockJs[/* calls */3](mock1),
                                      Jest.MockJs[/* calls */3](mock2)
                                    ]));
                    }));
      }));

exports.reducer = reducer;
/*  Not a pure module */
