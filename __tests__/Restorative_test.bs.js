// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Restorative = require("../src/Restorative.bs.js");

var initialState = /* record */[
  /* count */0,
  /* static */"foo",
  /* name */"Alice"
];

function reducer(state, action) {
  if (typeof action === "number") {
    if (action !== 0) {
      return /* record */[
              /* count */state[/* count */0] - 1 | 0,
              /* static */state[/* static */1],
              /* name */state[/* name */2]
            ];
    } else {
      return /* record */[
              /* count */state[/* count */0] + 1 | 0,
              /* static */state[/* static */1],
              /* name */state[/* name */2]
            ];
    }
  } else {
    return /* record */[
            /* count */state[/* count */0],
            /* static */state[/* static */1],
            /* name */action[0]
          ];
  }
}

Jest.describe("Restorative", (function (param) {
        Jest.test("getState returns initial state", (function (param) {
                var match = Restorative.createStore(initialState, reducer);
                return Jest.Expect[/* toBe */2](initialState, Jest.Expect[/* expect */0](Curry._1(match[/* getState */0], /* () */0)));
              }));
        Jest.test("it updates state", (function (param) {
                var match = Restorative.createStore(initialState, reducer);
                Curry._1(match[/* dispatch */3], /* Increment */0);
                return Jest.Expect[/* toBe */2](1, Jest.Expect[/* expect */0](Curry._1(match[/* getState */0], /* () */0)[/* count */0]));
              }));
        Jest.describe("Subscriptions", (function (param) {
                Jest.test("it calls subscriptions", (function (param) {
                        var subscription1 = jest.fn((function (prim) {
                                return /* () */0;
                              }));
                        var subscription2 = jest.fn((function (prim) {
                                return /* () */0;
                              }));
                        var match = Restorative.createStore(initialState, reducer);
                        var subscribe = match[/* subscribe */1];
                        Curry._3(subscribe, subscription1, undefined, /* () */0);
                        Curry._3(subscribe, subscription2, undefined, /* () */0);
                        Curry._1(match[/* dispatch */3], /* Increment */0);
                        var state = Curry._1(match[/* getState */0], /* () */0);
                        return Jest.Expect[/* toEqual */12](/* tuple */[
                                    /* array */[state],
                                    /* array */[state]
                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                        Jest.MockJs[/* calls */3](subscription1),
                                        Jest.MockJs[/* calls */3](subscription2)
                                      ]));
                      }));
                Jest.test("subscriptions can unsubscribe", (function (param) {
                        var subscription1 = jest.fn((function (prim) {
                                return /* () */0;
                              }));
                        var subscription2 = jest.fn((function (prim) {
                                return /* () */0;
                              }));
                        var match = Restorative.createStore(initialState, reducer);
                        var dispatch = match[/* dispatch */3];
                        var subscribe = match[/* subscribe */1];
                        var unsubscribe1 = Curry._3(subscribe, subscription1, undefined, /* () */0);
                        var unsubscribe2 = Curry._3(subscribe, subscription2, undefined, /* () */0);
                        Curry._1(dispatch, /* Increment */0);
                        Curry._1(unsubscribe1, /* () */0);
                        Curry._1(dispatch, /* Increment */0);
                        Curry._1(unsubscribe2, /* () */0);
                        Curry._1(dispatch, /* Increment */0);
                        return Jest.Expect[/* toEqual */12](/* tuple */[
                                    1,
                                    2
                                  ], Jest.Expect[/* expect */0](/* tuple */[
                                        Jest.MockJs[/* calls */3](subscription1).length,
                                        Jest.MockJs[/* calls */3](subscription2).length
                                      ]));
                      }));
                return Jest.test("it respects custom equalityFn", (function (param) {
                              var subscription1 = jest.fn((function (prim) {
                                      return /* () */0;
                                    }));
                              var subscription2 = jest.fn((function (prim) {
                                      return /* () */0;
                                    }));
                              var match = Restorative.createStore(initialState, reducer);
                              var dispatch = match[/* dispatch */3];
                              var subscribe = match[/* subscribe */1];
                              Curry._3(subscribe, subscription1, (function (a, b) {
                                      return a[/* count */0] === b[/* count */0];
                                    }), /* () */0);
                              Curry._3(subscribe, subscription2, (function (a, b) {
                                      return a[/* name */2] === b[/* name */2];
                                    }), /* () */0);
                              Curry._1(dispatch, /* Increment */0);
                              var count1_000 = Jest.MockJs[/* calls */3](subscription1).length;
                              var count1_001 = Jest.MockJs[/* calls */3](subscription2).length;
                              var count1 = /* tuple */[
                                count1_000,
                                count1_001
                              ];
                              Curry._1(dispatch, /* ChangeName */["Bob"]);
                              var count2_000 = Jest.MockJs[/* calls */3](subscription1).length;
                              var count2_001 = Jest.MockJs[/* calls */3](subscription2).length;
                              var count2 = /* tuple */[
                                count2_000,
                                count2_001
                              ];
                              return Jest.Expect[/* toEqual */12](/* tuple */[
                                          /* tuple */[
                                            1,
                                            0
                                          ],
                                          /* tuple */[
                                            1,
                                            1
                                          ]
                                        ], Jest.Expect[/* expect */0](/* tuple */[
                                              count1,
                                              count2
                                            ]));
                            }));
              }));
        return Jest.describe("Selectors", (function (param) {
                      Jest.test("it selects state slice", (function (param) {
                              var subscription = jest.fn((function (prim) {
                                      return /* () */0;
                                    }));
                              var match = Restorative.createStore(initialState, reducer);
                              Curry._4(match[/* subscribeWithSelector */2], subscription, (function (state) {
                                      return state[/* count */0];
                                    }), undefined, /* () */0);
                              Curry._1(match[/* dispatch */3], /* Increment */0);
                              return Jest.Expect[/* toEqual */12](/* array */[1], Jest.Expect[/* expect */0](Jest.MockJs[/* calls */3](subscription)));
                            }));
                      return Jest.test("it respects slice equality", (function (param) {
                                    var countSubscription = jest.fn((function (prim) {
                                            return /* () */0;
                                          }));
                                    var staticSubscription = jest.fn((function (prim) {
                                            return /* () */0;
                                          }));
                                    var match = Restorative.createStore(initialState, reducer);
                                    var subscribeWithSelector = match[/* subscribeWithSelector */2];
                                    Curry._4(subscribeWithSelector, countSubscription, (function (state) {
                                            return state[/* count */0];
                                          }), undefined, /* () */0);
                                    Curry._4(subscribeWithSelector, staticSubscription, (function (state) {
                                            return state[/* static */1];
                                          }), undefined, /* () */0);
                                    Curry._1(match[/* dispatch */3], /* Increment */0);
                                    return Jest.Expect[/* toEqual */12](/* tuple */[
                                                /* array */[1],
                                                /* array */[]
                                              ], Jest.Expect[/* expect */0](/* tuple */[
                                                    Jest.MockJs[/* calls */3](countSubscription),
                                                    Jest.MockJs[/* calls */3](staticSubscription)
                                                  ]));
                                  }));
                    }));
      }));

exports.initialState = initialState;
exports.reducer = reducer;
/*  Not a pure module */
